####################
### CREATE CLASSES AND NAMED EXPORT WITHOUT CONSTRUCTOR
####################
snippet ec "export class N {}" b
export class ${1:N${VISUAL}} {
	${0}
}
endsnippet

snippet ece "export class N extends S {}" b
export class ${1:N${VISUAL}} extends ${2:S${VISUAL}} {
	${0}
}
endsnippet

snippet eci "export class N implements I {}" b
export class ${1:N${VISUAL}} implements ${2:I${VISUAL}} {
	${0}
}
endsnippet

snippet edc "export default class N {}" b
export default class ${1:N${VISUAL}} {
	${0}
}
endsnippet

snippet edce "export default class N extends S {}" b
export default class ${1:N${VISUAL}} extends ${2:S${VISUAL}} {
	${0}
}
endsnippet

snippet edci "export default class N implements I {}" b
export default class ${1:N${VISUAL}} implements ${2:I${VISUAL}} {
	${0}
}
endsnippet

####################
### CREATE CLASSES AND EXPORT WITH CONSTRUCTORS
####################
snippet ecc "export class N {}" b
export class ${1:Name${VISUAL}} {
	constructor(${2:params${VISUAL}}) {
		${0}
	}
}
endsnippet

snippet edcc "export default class N {}" b
export default class ${1:Name${VISUAL}} {
	constructor(${2:params${VISUAL}}) {
		${0}
	}
}
endsnippet

snippet ecec "export class N extends S {}" b
export class ${1:Name${VISUAL}} extends ${2:S${VISUAL}} {
	constructor(${3:params${VISUAL}}) {
		${0}
	}
}
endsnippet

snippet edcec "export default class N extends S {}" b
export default class ${1:Name${VISUAL}} extends ${2:S${VISUAL}} {
	constructor(${3:params${VISUAL}}) {
		${0}
	}
}
endsnippet

snippet ecic "export class N implements I {}" b
export class ${1:Name${VISUAL}} implements ${2:I${VISUAL}} {
	constructor(${3:params${VISUAL}}) {
		${0}
	}
}
endsnippet

snippet edcic "export default class N implements I {}" b
export default class ${1:Name${VISUAL}} implements ${2:I${VISUAL}} {
	constructor(${3:params${VISUAL}}) {
		${0}
	}
}
endsnippet

####################
### GENERAL
####################
snippet c "console.log(thing)" b
console.log(${0:varName${VISUAL}});
endsnippet

snippet f "function ()" b
${1:name${VISUAL}}(${2:}) {
	${0:${VISUAL}}
}
endsnippet

snippet fn "function ()" b
function ${1:name${VISUAL}}(${2:}) {
	${0:${VISUAL}}
}
endsnippet

####################
### CONDITIONALS
####################
snippet i "if statement" b
if (${1:}) {
	${0:${VISUAL}}
}
endsnippet

snippet ei "elseif statement" b
else if(${1:}) {
	${0:${VISUAL}}
}
endsnippet

snippet e "else statement" b
else {
	${0:${VISUAL}}
}
endsnippet

snippet ie "if else statement" b
if (${1:}) {
	${2:}
} else {
	${0:}
}
endsnippet

####################
### TESTS
####################
snippet des "describe('thing', () => { ... })" b
describe('${1:}', () => {
	${0:${VISUAL}}
});
endsnippet

snippet it "it('should do', () => { ... })" b
it('${1:}', () => {
	${0:${VISUAL}}
});
endsnippet

snippet t "test('should do', () => { ... })" b
test('${1:}', () => {
	${0:${VISUAL}}
});
endsnippet

snippet bef "beforeEach(() => { ... })" b
beforeEach(() => {
	${0:${VISUAL}}
});
endsnippet

snippet aft "afterEach(() => { ... })" b
afterEach(() => {
	${0:${VISUAL}}
});
endsnippet

snippet befa "beforeAll(() => { ... })" b
beforeAll(() => {
	${0:${VISUAL}}
});
endsnippet

snippet afta "afterAll(() => { ... })" b
afterAll(() => {
	${0:${VISUAL}}
});
endsnippet

snippet exp "expect(...)" b
expect(${1:})${0};
endsnippet
